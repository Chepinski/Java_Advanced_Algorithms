Questions:
What is the Barabasi model and why is it important?
Research DAG (Directed acyclic graphs (for DFS))


Notes:
BFS is important in web crawling.

DFS takes same time whether recursive or iterative.  Java will use stack for both.

DFS = stack (mehr memory friendly)
BFS = queue

toString method can always be overridden

DAG directed acyclic graph..a graph with no directed cycles
topological sort has linear time complexity

Hamiltonian path?

topological order
	find edge with no incoming edges
	then find next edge with no incoming edges
		(edges already counted do not count as an incoming edge)
	repeat until done
	
	gives us the steps in order we have to take to complete a task.
	no task can be completed until the previous steps (incoming edges) are completed
		-dependency management (Maven)
		-syllabus für Uni
		
Cycle = we are visiting again a vertex that is being visited

O(N) items (leaf nodes) in queue, if graph has N - BFS (good for artificial intelligence/robot movements
	because it searches through the entire local area.
O(logN) items, so more memory friendly and preferred - DFS

Shortest Path algorithms
finding a shortest path between two vertices in a graph
	-Dijkstra
		Edsger Dijkstra 1956
		positive edge weights only
		asymptotically fastest single-source shortest-path algorithm
		if source changes, needs recalculation
		O(V*log(V)+E) V=verteces E=edges
		greedy algorithm/tries to find min distance between all verteces
		
		Adjacency matrixes help Dijkstra
	-Bellman Ford
		Bellman and Ford (independently) 1958
		slower but can handle negative edge weights as well
		V-1 iterations running O(V*E)
		V-1 +1 to detect cycles
		no negative cycles IRL but sometimes problems (forex, stock market)
			are given negative edges
			
DAG (directed acyclic[no cyles] graph) shortest path algorithm
	-topological sorting DFS O(E+V), much faster than Dijkstra & Bellman-Ford
	-solving Knapsack-problem application, GPS, vehicles routing, navigation
	-RIP (Routing Information Protocol)??  WWW wants to send packets on the shortest path possible
	
	Avidan-Shamir method
		-shrink an image e.g. on a browser without distortion
		-Photoshop/GIMP
			vertices are pixels and edges point to downward 3 neighbors

Disjoint sets (union-find)
	3 operations: union, find, makeSet
	O(1) is vertex in the same set?
	makeSet
		function makeSet(x)
			x.parent = x //item is set as own parent
	find
		function find(x)
			if x.parent == x
				return x
			else 
				return find(x.parent)  //if x.parent = itself is root node
	union
		function union(x,y)
			xRoot= find(x)
			yRoot = find(y)
			x.Root.parent = yRoot
			//Problem: tree like structures like binary search can become unbalanced
	used in Kruskal-algorithm
	can check for cycle in asymptotically O(1)

Kruskal-algorithm
	-sort the edges according to edge weights
	-can be done in O(N*logN) with mergesort or quicksort
		worst-case running time O(E*logE)
	-union find data structure/"disjoint set"
Prims algorithm
	-vertex (as opposed to Kruskal)
	-two types: lazy and eager
	-heap used
	-faster in the limit when graph is dense (more edges than vertices)
	-Kruskal better in typical situations and uses simpler data structures
	-good for things like connecting N cities at the lowest cost
		cities are vertexes and roads are vertexes
	-k-means clustering
		classify similar items
		machine learning
		dots closer to each other than any other dots in same cluster
	-routing in LAN
		(STP) spanning tree protocol/loop-free topology

Strongly connected graph
	-strongly connected if can get from any vertex to another (e.g. undirected graph)
	-directed graphs CANNOT be reached from any vertex
		may be connected but not strongly connected
	-we can find this in O(v)
	-we can shrink strongly graph into 1 vertex
	Kosaraju algorithm
		-uses 2 DFS's
		-transpose the graph (reverse the edges)
	Tarjan algorithm
		-uses 1 DFS
		-more popular
		*both algorithms useful for:
			-ecology: determining hierarchy of food needs
			-software engineering: package large software using strongly connected classes
			-astrophysics: detect faint stars by clustering them
			-youtube: recommend based on connected components/clusters	
Maximum Flow
	-Flow network: G(V,E) given a graph with vertices, connected edges and a flow network (source and sink)
	-s: source -> flow coming from source
	-t:sink ->flow heading for the sink
	-we assign a capacity to every edge (max flow to that edge/upper bound)
	-we assign a flow value to every edge (actual flow e.g gallons per second)
	-FIND THE FLOW WITH MAX VALUE FROM SOURCE TO SINK
	-capacity constraint: for all u,v vertexes in V, f(u,v)≤ c(u,v)
		flow can not be larger than the capacity
	-flow conservation:  for all v vertices in V (except for s & t)
		flow income must be equal to the outgoing flow
		Σᵥf(u,v)=0
	-skew symmetry: for all u,v vertex in V, f(u,v) = -f(v,u)
	-flow constraint: the flow leaving from s must be equal to the flow arriving at t
		Σᵤf(s,u)=Σᵥf(v,t)
	-the flow of a network is how is coming from the source or how much is going
		into the sink.  should be the same number.
	Cuts
		max-flow, min-cut theorem?
	Residual network
		-residual network = original capacity - flow in graph ≥ 0
		      c'(u,v)			c(u,v)				f(u,v)
		- will always be greater than or equal to 0 because original capacity
			will always be the same or greater than the flow
		- we use the residual network to find the "augmenting path"
			if we find an augmenting path, we haven't found the maximum flow of the network
	Ford-Fulkerson algorithm (augmenting path algorithm)
		-an augmented path is a path that we have sent flow down but still has
			a residual network (=more flow is able to go down the path)
			a path that has used all its capacity is said to be "saturated"
		-maximum flow occurs when no path from s to t is unsaturated
		algorithm
			1 initialize the flow network to be 0 at the beginning
			2  while there is a path from s to t int he residual network (G'),
				find that augmenting path and augment G flow network
	 	-uses BFS to find augmenting paths
	 	-Running time of Edmonds-Karp: O(VE²)
	 	-Running time of Dinic: O(V²E)
	 		E > V so Dinic is faster
	 	-MINIMUM CUT = MAX FLOW
	 	APPLICATIONS of max flow
	 		-communication networks has a set of requests to transmit messages between servers that
	 			are connected by channels
	 			What is the max rate at which info can be transferred between 2 specified servers
	 			If there are costs, what is the least expensive way?
	Bipartite Matching
		-in graph theory, a graph whose vertices can be divided into 2 disjoint sets
		U and V such that ever edge connects a vertex in U to one in V
		(no edge within sets)
		-example: a set of people and a set of jobs to be done
		a person can only do so many jobs.  can model this situation using bipartite graph
		it assigns jobs such that as many people get jobs as possible
		-maximum matching: contains as many edges as possible
		-all one set connected with source
		-all other set connected with sink
		-find maximum flow (maximum matching)
		
		
